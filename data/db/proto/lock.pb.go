// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data/db/proto/lock.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IsHoldingPointerRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *IsHoldingPointerRequest) Reset()                    { *m = IsHoldingPointerRequest{} }
func (m *IsHoldingPointerRequest) String() string            { return proto1.CompactTextString(m) }
func (*IsHoldingPointerRequest) ProtoMessage()               {}
func (*IsHoldingPointerRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *IsHoldingPointerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type IsHoldingPointerReply struct {
	Holding bool `protobuf:"varint,1,opt,name=holding" json:"holding,omitempty"`
}

func (m *IsHoldingPointerReply) Reset()                    { *m = IsHoldingPointerReply{} }
func (m *IsHoldingPointerReply) String() string            { return proto1.CompactTextString(m) }
func (*IsHoldingPointerReply) ProtoMessage()               {}
func (*IsHoldingPointerReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *IsHoldingPointerReply) GetHolding() bool {
	if m != nil {
		return m.Holding
	}
	return false
}

func init() {
	proto1.RegisterType((*IsHoldingPointerRequest)(nil), "wm.data.db.IsHoldingPointerRequest")
	proto1.RegisterType((*IsHoldingPointerReply)(nil), "wm.data.db.IsHoldingPointerReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PointerLocker service

type PointerLockerClient interface {
	IsHoldingPointer(ctx context.Context, in *IsHoldingPointerRequest, opts ...grpc.CallOption) (*IsHoldingPointerReply, error)
}

type pointerLockerClient struct {
	cc *grpc.ClientConn
}

func NewPointerLockerClient(cc *grpc.ClientConn) PointerLockerClient {
	return &pointerLockerClient{cc}
}

func (c *pointerLockerClient) IsHoldingPointer(ctx context.Context, in *IsHoldingPointerRequest, opts ...grpc.CallOption) (*IsHoldingPointerReply, error) {
	out := new(IsHoldingPointerReply)
	err := grpc.Invoke(ctx, "/wm.data.db.PointerLocker/IsHoldingPointer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PointerLocker service

type PointerLockerServer interface {
	IsHoldingPointer(context.Context, *IsHoldingPointerRequest) (*IsHoldingPointerReply, error)
}

func RegisterPointerLockerServer(s *grpc.Server, srv PointerLockerServer) {
	s.RegisterService(&_PointerLocker_serviceDesc, srv)
}

func _PointerLocker_IsHoldingPointer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsHoldingPointerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointerLockerServer).IsHoldingPointer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wm.data.db.PointerLocker/IsHoldingPointer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointerLockerServer).IsHoldingPointer(ctx, req.(*IsHoldingPointerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PointerLocker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wm.data.db.PointerLocker",
	HandlerType: (*PointerLockerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsHoldingPointer",
			Handler:    _PointerLocker_IsHoldingPointer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data/db/proto/lock.proto",
}

func init() { proto1.RegisterFile("data/db/proto/lock.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x48, 0x49, 0x2c, 0x49,
	0xd4, 0x4f, 0x49, 0xd2, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0xc9, 0x4f, 0xce, 0xd6, 0x03,
	0x33, 0x85, 0xb8, 0xca, 0x73, 0xf5, 0x40, 0x92, 0x7a, 0x29, 0x49, 0x4a, 0x9a, 0x5c, 0xe2, 0x9e,
	0xc5, 0x1e, 0xf9, 0x39, 0x29, 0x99, 0x79, 0xe9, 0x01, 0xf9, 0x99, 0x79, 0x25, 0xa9, 0x45, 0x41,
	0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0x9c, 0x41, 0x4c, 0x99, 0x29, 0x4a, 0x86, 0x5c, 0xa2, 0x98, 0x4a, 0x0b, 0x72, 0x2a, 0x85,
	0x24, 0xb8, 0xd8, 0x33, 0x20, 0xc2, 0x60, 0xd5, 0x1c, 0x41, 0x30, 0xae, 0x51, 0x2e, 0x17, 0x2f,
	0x54, 0xa5, 0x4f, 0x7e, 0x72, 0x76, 0x6a, 0x91, 0x50, 0x0c, 0x97, 0x00, 0xba, 0x19, 0x42, 0xca,
	0x7a, 0x08, 0xf7, 0xe8, 0xe1, 0x70, 0x8c, 0x94, 0x22, 0x7e, 0x45, 0x05, 0x39, 0x95, 0x4a, 0x0c,
	0x4e, 0x86, 0x51, 0xfa, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xe5,
	0x99, 0x79, 0x29, 0xb9, 0x99, 0x39, 0x39, 0xa9, 0x79, 0xe9, 0xfa, 0xb9, 0x99, 0xc5, 0x19, 0xfa,
	0x28, 0x01, 0x62, 0x0d, 0x26, 0x93, 0xd8, 0xc0, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x80,
	0x30, 0x7a, 0x48, 0x2e, 0x01, 0x00, 0x00,
}
