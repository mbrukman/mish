// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data/db/proto/hub.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Consistency int32

const (
	Consistency_FULL_CONSISTENCY Consistency = 0
	Consistency_FROM_CACHE       Consistency = 1
)

var Consistency_name = map[int32]string{
	0: "FULL_CONSISTENCY",
	1: "FROM_CACHE",
}
var Consistency_value = map[string]int32{
	"FULL_CONSISTENCY": 0,
	"FROM_CACHE":       1,
}

func (x Consistency) String() string {
	return proto1.EnumName(Consistency_name, int32(x))
}
func (Consistency) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type CreateSnapshotWrite struct {
	StoredRecipe *StoredRecipe `protobuf:"bytes,1,opt,name=stored_recipe,json=storedRecipe" json:"stored_recipe,omitempty"`
}

func (m *CreateSnapshotWrite) Reset()                    { *m = CreateSnapshotWrite{} }
func (m *CreateSnapshotWrite) String() string            { return proto1.CompactTextString(m) }
func (*CreateSnapshotWrite) ProtoMessage()               {}
func (*CreateSnapshotWrite) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CreateSnapshotWrite) GetStoredRecipe() *StoredRecipe {
	if m != nil {
		return m.StoredRecipe
	}
	return nil
}

type SetPointerWrite struct {
	Next *PointerAtSnapshot `protobuf:"bytes,1,opt,name=next" json:"next,omitempty"`
}

func (m *SetPointerWrite) Reset()                    { *m = SetPointerWrite{} }
func (m *SetPointerWrite) String() string            { return proto1.CompactTextString(m) }
func (*SetPointerWrite) ProtoMessage()               {}
func (*SetPointerWrite) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *SetPointerWrite) GetNext() *PointerAtSnapshot {
	if m != nil {
		return m.Next
	}
	return nil
}

type AcquirePointerWrite struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
}

func (m *AcquirePointerWrite) Reset()                    { *m = AcquirePointerWrite{} }
func (m *AcquirePointerWrite) String() string            { return proto1.CompactTextString(m) }
func (*AcquirePointerWrite) ProtoMessage()               {}
func (*AcquirePointerWrite) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *AcquirePointerWrite) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AcquirePointerWrite) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type Write struct {
	// All Writes from a Client must start with that client's prefix. I.e., one of:
	// CreateSnapshotWrite whose ID starts with Prefix
	// SetPointerWrite where the Pointer ID starts with Prefix
	//
	// Types that are valid to be assigned to W:
	//	*Write_WCreateSnapshot
	//	*Write_WSetPointer
	//	*Write_WAcquirePointer
	W isWrite_W `protobuf_oneof:"w"`
}

func (m *Write) Reset()                    { *m = Write{} }
func (m *Write) String() string            { return proto1.CompactTextString(m) }
func (*Write) ProtoMessage()               {}
func (*Write) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type isWrite_W interface{ isWrite_W() }

type Write_WCreateSnapshot struct {
	WCreateSnapshot *CreateSnapshotWrite `protobuf:"bytes,1,opt,name=w_create_snapshot,json=wCreateSnapshot,oneof"`
}
type Write_WSetPointer struct {
	WSetPointer *SetPointerWrite `protobuf:"bytes,2,opt,name=w_set_pointer,json=wSetPointer,oneof"`
}
type Write_WAcquirePointer struct {
	WAcquirePointer *AcquirePointerWrite `protobuf:"bytes,3,opt,name=w_acquire_pointer,json=wAcquirePointer,oneof"`
}

func (*Write_WCreateSnapshot) isWrite_W() {}
func (*Write_WSetPointer) isWrite_W()     {}
func (*Write_WAcquirePointer) isWrite_W() {}

func (m *Write) GetW() isWrite_W {
	if m != nil {
		return m.W
	}
	return nil
}

func (m *Write) GetWCreateSnapshot() *CreateSnapshotWrite {
	if x, ok := m.GetW().(*Write_WCreateSnapshot); ok {
		return x.WCreateSnapshot
	}
	return nil
}

func (m *Write) GetWSetPointer() *SetPointerWrite {
	if x, ok := m.GetW().(*Write_WSetPointer); ok {
		return x.WSetPointer
	}
	return nil
}

func (m *Write) GetWAcquirePointer() *AcquirePointerWrite {
	if x, ok := m.GetW().(*Write_WAcquirePointer); ok {
		return x.WAcquirePointer
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Write) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _Write_OneofMarshaler, _Write_OneofUnmarshaler, _Write_OneofSizer, []interface{}{
		(*Write_WCreateSnapshot)(nil),
		(*Write_WSetPointer)(nil),
		(*Write_WAcquirePointer)(nil),
	}
}

func _Write_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*Write)
	// w
	switch x := m.W.(type) {
	case *Write_WCreateSnapshot:
		b.EncodeVarint(1<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.WCreateSnapshot); err != nil {
			return err
		}
	case *Write_WSetPointer:
		b.EncodeVarint(2<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.WSetPointer); err != nil {
			return err
		}
	case *Write_WAcquirePointer:
		b.EncodeVarint(3<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.WAcquirePointer); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Write.W has unexpected type %T", x)
	}
	return nil
}

func _Write_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*Write)
	switch tag {
	case 1: // w.w_create_snapshot
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(CreateSnapshotWrite)
		err := b.DecodeMessage(msg)
		m.W = &Write_WCreateSnapshot{msg}
		return true, err
	case 2: // w.w_set_pointer
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(SetPointerWrite)
		err := b.DecodeMessage(msg)
		m.W = &Write_WSetPointer{msg}
		return true, err
	case 3: // w.w_acquire_pointer
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(AcquirePointerWrite)
		err := b.DecodeMessage(msg)
		m.W = &Write_WAcquirePointer{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Write_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*Write)
	// w
	switch x := m.W.(type) {
	case *Write_WCreateSnapshot:
		s := proto1.Size(x.WCreateSnapshot)
		n += proto1.SizeVarint(1<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Write_WSetPointer:
		s := proto1.Size(x.WSetPointer)
		n += proto1.SizeVarint(2<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Write_WAcquirePointer:
		s := proto1.Size(x.WAcquirePointer)
		n += proto1.SizeVarint(3<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RegisterClientRequest struct {
	// the type of client, e.g. wmdaemon or wmrunner-432
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *RegisterClientRequest) Reset()                    { *m = RegisterClientRequest{} }
func (m *RegisterClientRequest) String() string            { return proto1.CompactTextString(m) }
func (*RegisterClientRequest) ProtoMessage()               {}
func (*RegisterClientRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *RegisterClientRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type RegisterClientReply struct {
	// Prefix (objects created by this client must start with prefix)
	// Also the name of the client
	// e.g. r-wmdaemon-1 or r-wmrunner-432
	Prefix          string `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	DEPRECATEDToken string `protobuf:"bytes,2,opt,name=DEPRECATED_token,json=DEPRECATEDToken" json:"DEPRECATED_token,omitempty"`
}

func (m *RegisterClientReply) Reset()                    { *m = RegisterClientReply{} }
func (m *RegisterClientReply) String() string            { return proto1.CompactTextString(m) }
func (*RegisterClientReply) ProtoMessage()               {}
func (*RegisterClientReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *RegisterClientReply) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *RegisterClientReply) GetDEPRECATEDToken() string {
	if m != nil {
		return m.DEPRECATEDToken
	}
	return ""
}

// WriteManyRequest from a client
type WriteManyRequest struct {
	// The new Writes from this Client
	Writes          []*Write `protobuf:"bytes,1,rep,name=writes" json:"writes,omitempty"`
	DEPRECATEDToken string   `protobuf:"bytes,2,opt,name=DEPRECATED_token,json=DEPRECATEDToken" json:"DEPRECATED_token,omitempty"`
}

func (m *WriteManyRequest) Reset()                    { *m = WriteManyRequest{} }
func (m *WriteManyRequest) String() string            { return proto1.CompactTextString(m) }
func (*WriteManyRequest) ProtoMessage()               {}
func (*WriteManyRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *WriteManyRequest) GetWrites() []*Write {
	if m != nil {
		return m.Writes
	}
	return nil
}

func (m *WriteManyRequest) GetDEPRECATEDToken() string {
	if m != nil {
		return m.DEPRECATEDToken
	}
	return ""
}

type WriteManyReply struct {
	DEPRECATEDFirstWrittenSeq uint64 `protobuf:"varint,1,opt,name=DEPRECATED_first_written_seq,json=DEPRECATEDFirstWrittenSeq" json:"DEPRECATED_first_written_seq,omitempty"`
}

func (m *WriteManyReply) Reset()                    { *m = WriteManyReply{} }
func (m *WriteManyReply) String() string            { return proto1.CompactTextString(m) }
func (*WriteManyReply) ProtoMessage()               {}
func (*WriteManyReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *WriteManyReply) GetDEPRECATEDFirstWrittenSeq() uint64 {
	if m != nil {
		return m.DEPRECATEDFirstWrittenSeq
	}
	return 0
}

type HeadManyRequest struct {
	// For all of the given pointer heads, return a SetPointerWrite for the pointer head
	// if we have an update, and the writes you need to get there.
	PointerHeads []*PointerAtRev `protobuf:"bytes,1,rep,name=pointer_heads,json=pointerHeads" json:"pointer_heads,omitempty"`
}

func (m *HeadManyRequest) Reset()                    { *m = HeadManyRequest{} }
func (m *HeadManyRequest) String() string            { return proto1.CompactTextString(m) }
func (*HeadManyRequest) ProtoMessage()               {}
func (*HeadManyRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *HeadManyRequest) GetPointerHeads() []*PointerAtRev {
	if m != nil {
		return m.PointerHeads
	}
	return nil
}

type HeadManyStreamReply struct {
	Write *Write `protobuf:"bytes,1,opt,name=write" json:"write,omitempty"`
	// The pointer doesn't exist.
	IdNotFound string `protobuf:"bytes,2,opt,name=id_not_found,json=idNotFound" json:"id_not_found,omitempty"`
}

func (m *HeadManyStreamReply) Reset()                    { *m = HeadManyStreamReply{} }
func (m *HeadManyStreamReply) String() string            { return proto1.CompactTextString(m) }
func (*HeadManyStreamReply) ProtoMessage()               {}
func (*HeadManyStreamReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *HeadManyStreamReply) GetWrite() *Write {
	if m != nil {
		return m.Write
	}
	return nil
}

func (m *HeadManyStreamReply) GetIdNotFound() string {
	if m != nil {
		return m.IdNotFound
	}
	return ""
}

type AllPathsToSnapshotRequest struct {
	SnapId string `protobuf:"bytes,1,opt,name=snap_id,json=snapId" json:"snap_id,omitempty"`
}

func (m *AllPathsToSnapshotRequest) Reset()                    { *m = AllPathsToSnapshotRequest{} }
func (m *AllPathsToSnapshotRequest) String() string            { return proto1.CompactTextString(m) }
func (*AllPathsToSnapshotRequest) ProtoMessage()               {}
func (*AllPathsToSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *AllPathsToSnapshotRequest) GetSnapId() string {
	if m != nil {
		return m.SnapId
	}
	return ""
}

type AllPathsToSnapshotReply struct {
	Recipes []*StoredRecipe `protobuf:"bytes,1,rep,name=recipes" json:"recipes,omitempty"`
}

func (m *AllPathsToSnapshotReply) Reset()                    { *m = AllPathsToSnapshotReply{} }
func (m *AllPathsToSnapshotReply) String() string            { return proto1.CompactTextString(m) }
func (*AllPathsToSnapshotReply) ProtoMessage()               {}
func (*AllPathsToSnapshotReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *AllPathsToSnapshotReply) GetRecipes() []*StoredRecipe {
	if m != nil {
		return m.Recipes
	}
	return nil
}

type HasSnapshotsRequest struct {
	SnapIds     []string    `protobuf:"bytes,1,rep,name=snap_ids,json=snapIds" json:"snap_ids,omitempty"`
	Consistency Consistency `protobuf:"varint,2,opt,name=consistency,enum=wm.data.db.Consistency" json:"consistency,omitempty"`
}

func (m *HasSnapshotsRequest) Reset()                    { *m = HasSnapshotsRequest{} }
func (m *HasSnapshotsRequest) String() string            { return proto1.CompactTextString(m) }
func (*HasSnapshotsRequest) ProtoMessage()               {}
func (*HasSnapshotsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *HasSnapshotsRequest) GetSnapIds() []string {
	if m != nil {
		return m.SnapIds
	}
	return nil
}

func (m *HasSnapshotsRequest) GetConsistency() Consistency {
	if m != nil {
		return m.Consistency
	}
	return Consistency_FULL_CONSISTENCY
}

type HasSnapshotsReply struct {
	SnapIds []string `protobuf:"bytes,1,rep,name=snap_ids,json=snapIds" json:"snap_ids,omitempty"`
}

func (m *HasSnapshotsReply) Reset()                    { *m = HasSnapshotsReply{} }
func (m *HasSnapshotsReply) String() string            { return proto1.CompactTextString(m) }
func (*HasSnapshotsReply) ProtoMessage()               {}
func (*HasSnapshotsReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *HasSnapshotsReply) GetSnapIds() []string {
	if m != nil {
		return m.SnapIds
	}
	return nil
}

func init() {
	proto1.RegisterType((*CreateSnapshotWrite)(nil), "wm.data.db.CreateSnapshotWrite")
	proto1.RegisterType((*SetPointerWrite)(nil), "wm.data.db.SetPointerWrite")
	proto1.RegisterType((*AcquirePointerWrite)(nil), "wm.data.db.AcquirePointerWrite")
	proto1.RegisterType((*Write)(nil), "wm.data.db.Write")
	proto1.RegisterType((*RegisterClientRequest)(nil), "wm.data.db.RegisterClientRequest")
	proto1.RegisterType((*RegisterClientReply)(nil), "wm.data.db.RegisterClientReply")
	proto1.RegisterType((*WriteManyRequest)(nil), "wm.data.db.WriteManyRequest")
	proto1.RegisterType((*WriteManyReply)(nil), "wm.data.db.WriteManyReply")
	proto1.RegisterType((*HeadManyRequest)(nil), "wm.data.db.HeadManyRequest")
	proto1.RegisterType((*HeadManyStreamReply)(nil), "wm.data.db.HeadManyStreamReply")
	proto1.RegisterType((*AllPathsToSnapshotRequest)(nil), "wm.data.db.AllPathsToSnapshotRequest")
	proto1.RegisterType((*AllPathsToSnapshotReply)(nil), "wm.data.db.AllPathsToSnapshotReply")
	proto1.RegisterType((*HasSnapshotsRequest)(nil), "wm.data.db.HasSnapshotsRequest")
	proto1.RegisterType((*HasSnapshotsReply)(nil), "wm.data.db.HasSnapshotsReply")
	proto1.RegisterEnum("wm.data.db.Consistency", Consistency_name, Consistency_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StorageHub service

type StorageHubClient interface {
	// recipes lookup
	// Returns a not found error if the snapshot doesn't exist.
	LookupPathToSnapshot(ctx context.Context, in *LookupPathToSnapshotRequest, opts ...grpc.CallOption) (*LookupPathToSnapshotReply, error)
	AllPathsToSnapshot(ctx context.Context, in *AllPathsToSnapshotRequest, opts ...grpc.CallOption) (*AllPathsToSnapshotReply, error)
	// ptrs get
	AcquirePointer(ctx context.Context, in *AcquirePointerRequest, opts ...grpc.CallOption) (*AcquirePointerReply, error)
	PointerMetadata(ctx context.Context, in *PointerMetadataRequest, opts ...grpc.CallOption) (*PointerMetadataReply, error)
	// ptrs get
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	// Register a new Client.
	RegisterClient(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientReply, error)
	// Write multiple Writes at once.
	WriteMany(ctx context.Context, in *WriteManyRequest, opts ...grpc.CallOption) (*WriteManyReply, error)
	// Fetch multiple Writes at once.
	HeadMany(ctx context.Context, in *HeadManyRequest, opts ...grpc.CallOption) (StorageHub_HeadManyClient, error)
	// Check which snapshots we have already.
	HasSnapshots(ctx context.Context, in *HasSnapshotsRequest, opts ...grpc.CallOption) (*HasSnapshotsReply, error)
	// debug ptrs
	// Returns the currently active pointer IDs visible to the caller.
	// Active means "currently in memory", though this is implementation-dependant.
	DebugPtrs(ctx context.Context, in *DebugPtrsRequest, opts ...grpc.CallOption) (*DebugPtrsReply, error)
}

type storageHubClient struct {
	cc *grpc.ClientConn
}

func NewStorageHubClient(cc *grpc.ClientConn) StorageHubClient {
	return &storageHubClient{cc}
}

func (c *storageHubClient) LookupPathToSnapshot(ctx context.Context, in *LookupPathToSnapshotRequest, opts ...grpc.CallOption) (*LookupPathToSnapshotReply, error) {
	out := new(LookupPathToSnapshotReply)
	err := grpc.Invoke(ctx, "/wm.data.db.StorageHub/LookupPathToSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHubClient) AllPathsToSnapshot(ctx context.Context, in *AllPathsToSnapshotRequest, opts ...grpc.CallOption) (*AllPathsToSnapshotReply, error) {
	out := new(AllPathsToSnapshotReply)
	err := grpc.Invoke(ctx, "/wm.data.db.StorageHub/AllPathsToSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHubClient) AcquirePointer(ctx context.Context, in *AcquirePointerRequest, opts ...grpc.CallOption) (*AcquirePointerReply, error) {
	out := new(AcquirePointerReply)
	err := grpc.Invoke(ctx, "/wm.data.db.StorageHub/AcquirePointer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHubClient) PointerMetadata(ctx context.Context, in *PointerMetadataRequest, opts ...grpc.CallOption) (*PointerMetadataReply, error) {
	out := new(PointerMetadataReply)
	err := grpc.Invoke(ctx, "/wm.data.db.StorageHub/PointerMetadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHubClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := grpc.Invoke(ctx, "/wm.data.db.StorageHub/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHubClient) RegisterClient(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientReply, error) {
	out := new(RegisterClientReply)
	err := grpc.Invoke(ctx, "/wm.data.db.StorageHub/RegisterClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHubClient) WriteMany(ctx context.Context, in *WriteManyRequest, opts ...grpc.CallOption) (*WriteManyReply, error) {
	out := new(WriteManyReply)
	err := grpc.Invoke(ctx, "/wm.data.db.StorageHub/WriteMany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHubClient) HeadMany(ctx context.Context, in *HeadManyRequest, opts ...grpc.CallOption) (StorageHub_HeadManyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StorageHub_serviceDesc.Streams[0], c.cc, "/wm.data.db.StorageHub/HeadMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageHubHeadManyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageHub_HeadManyClient interface {
	Recv() (*HeadManyStreamReply, error)
	grpc.ClientStream
}

type storageHubHeadManyClient struct {
	grpc.ClientStream
}

func (x *storageHubHeadManyClient) Recv() (*HeadManyStreamReply, error) {
	m := new(HeadManyStreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageHubClient) HasSnapshots(ctx context.Context, in *HasSnapshotsRequest, opts ...grpc.CallOption) (*HasSnapshotsReply, error) {
	out := new(HasSnapshotsReply)
	err := grpc.Invoke(ctx, "/wm.data.db.StorageHub/HasSnapshots", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageHubClient) DebugPtrs(ctx context.Context, in *DebugPtrsRequest, opts ...grpc.CallOption) (*DebugPtrsReply, error) {
	out := new(DebugPtrsReply)
	err := grpc.Invoke(ctx, "/wm.data.db.StorageHub/DebugPtrs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StorageHub service

type StorageHubServer interface {
	// recipes lookup
	// Returns a not found error if the snapshot doesn't exist.
	LookupPathToSnapshot(context.Context, *LookupPathToSnapshotRequest) (*LookupPathToSnapshotReply, error)
	AllPathsToSnapshot(context.Context, *AllPathsToSnapshotRequest) (*AllPathsToSnapshotReply, error)
	// ptrs get
	AcquirePointer(context.Context, *AcquirePointerRequest) (*AcquirePointerReply, error)
	PointerMetadata(context.Context, *PointerMetadataRequest) (*PointerMetadataReply, error)
	// ptrs get
	Get(context.Context, *GetRequest) (*GetReply, error)
	// Register a new Client.
	RegisterClient(context.Context, *RegisterClientRequest) (*RegisterClientReply, error)
	// Write multiple Writes at once.
	WriteMany(context.Context, *WriteManyRequest) (*WriteManyReply, error)
	// Fetch multiple Writes at once.
	HeadMany(*HeadManyRequest, StorageHub_HeadManyServer) error
	// Check which snapshots we have already.
	HasSnapshots(context.Context, *HasSnapshotsRequest) (*HasSnapshotsReply, error)
	// debug ptrs
	// Returns the currently active pointer IDs visible to the caller.
	// Active means "currently in memory", though this is implementation-dependant.
	DebugPtrs(context.Context, *DebugPtrsRequest) (*DebugPtrsReply, error)
}

func RegisterStorageHubServer(s *grpc.Server, srv StorageHubServer) {
	s.RegisterService(&_StorageHub_serviceDesc, srv)
}

func _StorageHub_LookupPathToSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupPathToSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHubServer).LookupPathToSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wm.data.db.StorageHub/LookupPathToSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHubServer).LookupPathToSnapshot(ctx, req.(*LookupPathToSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHub_AllPathsToSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllPathsToSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHubServer).AllPathsToSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wm.data.db.StorageHub/AllPathsToSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHubServer).AllPathsToSnapshot(ctx, req.(*AllPathsToSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHub_AcquirePointer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquirePointerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHubServer).AcquirePointer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wm.data.db.StorageHub/AcquirePointer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHubServer).AcquirePointer(ctx, req.(*AcquirePointerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHub_PointerMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointerMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHubServer).PointerMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wm.data.db.StorageHub/PointerMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHubServer).PointerMetadata(ctx, req.(*PointerMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHub_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHubServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wm.data.db.StorageHub/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHubServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHub_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHubServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wm.data.db.StorageHub/RegisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHubServer).RegisterClient(ctx, req.(*RegisterClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHub_WriteMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHubServer).WriteMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wm.data.db.StorageHub/WriteMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHubServer).WriteMany(ctx, req.(*WriteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHub_HeadMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HeadManyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageHubServer).HeadMany(m, &storageHubHeadManyServer{stream})
}

type StorageHub_HeadManyServer interface {
	Send(*HeadManyStreamReply) error
	grpc.ServerStream
}

type storageHubHeadManyServer struct {
	grpc.ServerStream
}

func (x *storageHubHeadManyServer) Send(m *HeadManyStreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageHub_HasSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHubServer).HasSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wm.data.db.StorageHub/HasSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHubServer).HasSnapshots(ctx, req.(*HasSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageHub_DebugPtrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugPtrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageHubServer).DebugPtrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wm.data.db.StorageHub/DebugPtrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageHubServer).DebugPtrs(ctx, req.(*DebugPtrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StorageHub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wm.data.db.StorageHub",
	HandlerType: (*StorageHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupPathToSnapshot",
			Handler:    _StorageHub_LookupPathToSnapshot_Handler,
		},
		{
			MethodName: "AllPathsToSnapshot",
			Handler:    _StorageHub_AllPathsToSnapshot_Handler,
		},
		{
			MethodName: "AcquirePointer",
			Handler:    _StorageHub_AcquirePointer_Handler,
		},
		{
			MethodName: "PointerMetadata",
			Handler:    _StorageHub_PointerMetadata_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StorageHub_Get_Handler,
		},
		{
			MethodName: "RegisterClient",
			Handler:    _StorageHub_RegisterClient_Handler,
		},
		{
			MethodName: "WriteMany",
			Handler:    _StorageHub_WriteMany_Handler,
		},
		{
			MethodName: "HasSnapshots",
			Handler:    _StorageHub_HasSnapshots_Handler,
		},
		{
			MethodName: "DebugPtrs",
			Handler:    _StorageHub_DebugPtrs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HeadMany",
			Handler:       _StorageHub_HeadMany_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data/db/proto/hub.proto",
}

func init() { proto1.RegisterFile("data/db/proto/hub.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 900 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x7f, 0x73, 0xda, 0x46,
	0x10, 0x05, 0xdb, 0xc1, 0xf1, 0x62, 0x03, 0x3e, 0xdc, 0x18, 0x13, 0x67, 0xe2, 0x5e, 0xa7, 0x93,
	0xa4, 0x9d, 0x81, 0x86, 0xb4, 0x7f, 0x64, 0x3a, 0x99, 0x0e, 0xc1, 0xd8, 0x64, 0xc6, 0x38, 0xf4,
	0xa0, 0x4d, 0xd3, 0x7f, 0x54, 0x81, 0xce, 0x70, 0x63, 0x90, 0xb0, 0xee, 0x28, 0xe1, 0x4b, 0xf6,
	0x9b, 0xf4, 0x3b, 0x74, 0xee, 0x87, 0x40, 0x17, 0x44, 0x3c, 0xfd, 0xc7, 0x96, 0x76, 0x9f, 0xde,
	0xbe, 0xb7, 0xba, 0x5d, 0x04, 0xc7, 0x9e, 0x2b, 0xdc, 0xaa, 0xd7, 0xaf, 0x4e, 0xc3, 0x40, 0x04,
	0xd5, 0xd1, 0xac, 0x5f, 0x51, 0x57, 0x08, 0xe6, 0x93, 0x8a, 0xcc, 0x55, 0xbc, 0x7e, 0xf9, 0xc4,
	0x06, 0x79, 0xb4, 0x3f, 0x1b, 0x6a, 0x58, 0xf9, 0xd4, 0x4e, 0x4d, 0x03, 0xe6, 0x0b, 0x1a, 0x72,
	0x93, 0x7d, 0x6c, 0x67, 0x43, 0x3a, 0x60, 0x53, 0x6a, 0x92, 0xb8, 0x07, 0xc5, 0x46, 0x48, 0x5d,
	0x41, 0xbb, 0xbe, 0x3b, 0xe5, 0xa3, 0x40, 0x7c, 0x08, 0x99, 0xa0, 0xe8, 0x0d, 0x1c, 0x70, 0x11,
	0x84, 0xd4, 0x73, 0x34, 0xbc, 0x94, 0x3e, 0x4b, 0x3f, 0xcf, 0xd6, 0x4a, 0x95, 0x95, 0xa0, 0x4a,
	0x57, 0x01, 0x88, 0xca, 0x93, 0x7d, 0x1e, 0xbb, 0xc3, 0xe7, 0x90, 0xef, 0x52, 0xd1, 0xd1, 0x3a,
	0x34, 0xe3, 0x4b, 0xd8, 0xf1, 0xe9, 0x27, 0x61, 0x88, 0x9e, 0xc4, 0x89, 0x0c, 0xae, 0x2e, 0x22,
	0x0d, 0x44, 0x41, 0xf1, 0x6b, 0x28, 0xd6, 0x07, 0x77, 0x33, 0x16, 0x52, 0x8b, 0x29, 0x07, 0x5b,
	0xcc, 0x53, 0x3c, 0x7b, 0x64, 0x8b, 0x79, 0x08, 0xc1, 0xce, 0x28, 0xe0, 0xa2, 0xb4, 0xa5, 0x22,
	0xea, 0x1a, 0xff, 0x9b, 0x86, 0x07, 0x1a, 0xdd, 0x86, 0xc3, 0xb9, 0x33, 0x50, 0x16, 0x1d, 0x6e,
	0xf8, 0x8d, 0x88, 0xa7, 0x71, 0x11, 0x09, 0x5d, 0x68, 0xa5, 0x48, 0x7e, 0x6e, 0xc7, 0x51, 0x1d,
	0x0e, 0xe6, 0x0e, 0xa7, 0xc2, 0x31, 0x4d, 0x56, 0x55, 0xb3, 0xb5, 0xc7, 0x56, 0x63, 0x6c, 0xeb,
	0xad, 0x14, 0xc9, 0xce, 0x57, 0x31, 0xad, 0xc8, 0xd5, 0xc6, 0x96, 0x34, 0xdb, 0xeb, 0x8a, 0x12,
	0xbc, 0x2b, 0x45, 0x76, 0xfc, 0xed, 0x36, 0xa4, 0xe7, 0xf8, 0x7b, 0xf8, 0x8a, 0xd0, 0x21, 0xe3,
	0x82, 0x86, 0x8d, 0x31, 0xa3, 0xbe, 0x20, 0xf4, 0x6e, 0x46, 0xb9, 0x90, 0xcd, 0x11, 0x0b, 0xf3,
	0xfe, 0xf6, 0x88, 0xba, 0xc6, 0x7f, 0x40, 0xf1, 0x73, 0xf0, 0x74, 0xbc, 0x40, 0x8f, 0x20, 0x33,
	0x0d, 0xe9, 0x0d, 0xfb, 0x64, 0xc0, 0xe6, 0x0e, 0xbd, 0x80, 0xc2, 0x79, 0xb3, 0x43, 0x9a, 0x8d,
	0x7a, 0xaf, 0x79, 0xee, 0x88, 0xe0, 0x96, 0xfa, 0xa6, 0xd7, 0xf9, 0x55, 0xbc, 0x27, 0xc3, 0x78,
	0x04, 0x05, 0xa5, 0xb3, 0xed, 0xfa, 0x8b, 0x48, 0xc1, 0x0b, 0xc8, 0xcc, 0x65, 0x8c, 0x97, 0xd2,
	0x67, 0xdb, 0xcf, 0xb3, 0xb5, 0xc3, 0xb8, 0x47, 0x85, 0x26, 0x06, 0xf0, 0x7f, 0x2a, 0xfd, 0x0a,
	0xb9, 0x58, 0x25, 0x29, 0xff, 0x17, 0x38, 0x8d, 0x3d, 0x7c, 0xc3, 0x42, 0x2e, 0x1c, 0xc9, 0x2b,
	0xa8, 0xef, 0x70, 0x7a, 0xa7, 0x4c, 0xed, 0x90, 0x93, 0x15, 0xe6, 0x42, 0x42, 0x3e, 0x68, 0x44,
	0x97, 0xde, 0xe1, 0x0e, 0xe4, 0x5b, 0xd4, 0xf5, 0xe2, 0xda, 0xdf, 0xc0, 0x81, 0x79, 0x41, 0xce,
	0x88, 0xba, 0x5e, 0x64, 0xa1, 0x94, 0x78, 0x7a, 0x09, 0xfd, 0x9b, 0xec, 0x1b, 0xb8, 0x24, 0xe2,
	0xf8, 0x2f, 0x28, 0x46, 0x8c, 0x5d, 0x11, 0x52, 0x77, 0xa2, 0x95, 0x3e, 0x83, 0x07, 0xca, 0xb0,
	0x39, 0x86, 0x09, 0x0d, 0xd1, 0x79, 0x74, 0x06, 0xfb, 0xcc, 0x73, 0xfc, 0x40, 0x38, 0x37, 0xc1,
	0xcc, 0xf7, 0x4c, 0x2f, 0x80, 0x79, 0xd7, 0x81, 0xb8, 0x90, 0x11, 0xfc, 0x23, 0x9c, 0xd4, 0xc7,
	0xe3, 0x8e, 0x2b, 0x46, 0xbc, 0x17, 0x2c, 0xc7, 0xc7, 0xa8, 0x3f, 0x86, 0x5d, 0x79, 0xe2, 0x9d,
	0xe5, 0xb4, 0x64, 0xe4, 0xed, 0x3b, 0x0f, 0xb7, 0xe1, 0x38, 0xe9, 0x29, 0xa9, 0xad, 0x06, 0xbb,
	0x66, 0x41, 0x24, 0x79, 0xb5, 0x46, 0x3e, 0x02, 0xe2, 0x5b, 0x28, 0xb6, 0x5c, 0x1e, 0xf1, 0xf0,
	0xa8, 0xfc, 0x09, 0x3c, 0x34, 0xe5, 0x35, 0xd7, 0x1e, 0xd9, 0xd5, 0xf5, 0x39, 0x7a, 0x0d, 0xd9,
	0x41, 0xe0, 0x73, 0x79, 0x04, 0xfd, 0xc1, 0x42, 0xf9, 0xca, 0xd5, 0x8e, 0xad, 0x71, 0x5c, 0xa5,
	0x49, 0x1c, 0x8b, 0x2b, 0x70, 0x68, 0x17, 0x93, 0xaa, 0x37, 0x97, 0xfa, 0xee, 0x15, 0x64, 0x63,
	0x5c, 0xe8, 0x08, 0x0a, 0x17, 0xbf, 0x5d, 0x5d, 0x39, 0x8d, 0xf7, 0xd7, 0xdd, 0x77, 0xdd, 0x5e,
	0xf3, 0xba, 0xf1, 0xb1, 0x90, 0x42, 0x39, 0x80, 0x0b, 0xf2, 0xbe, 0xed, 0x34, 0xea, 0x8d, 0x56,
	0xb3, 0x90, 0xae, 0xfd, 0x93, 0x01, 0x90, 0x5e, 0xdd, 0x21, 0x6d, 0xcd, 0xfa, 0x68, 0x04, 0x47,
	0x57, 0x41, 0x70, 0x3b, 0x9b, 0xca, 0x96, 0xad, 0x3a, 0x86, 0x9e, 0xc5, 0x15, 0x27, 0x21, 0x4c,
	0x2b, 0xca, 0xdf, 0xde, 0x0f, 0x9c, 0x8e, 0x17, 0x38, 0x85, 0xfa, 0x80, 0xd6, 0xdf, 0x0c, 0xb2,
	0x1e, 0xdf, 0xf8, 0xbe, 0xcb, 0xdf, 0xdc, 0x07, 0xd3, 0x35, 0x7e, 0x87, 0x9c, 0xbd, 0x42, 0xd0,
	0xd7, 0x9b, 0xd7, 0x4e, 0xc4, 0xfd, 0xf4, 0x4b, 0x10, 0xcd, 0xfb, 0x11, 0xf2, 0x26, 0xd2, 0xa6,
	0xc2, 0x95, 0x58, 0x84, 0x13, 0x06, 0x25, 0x4a, 0x46, 0xcc, 0x67, 0x5f, 0xc4, 0x68, 0xea, 0x9f,
	0x60, 0xfb, 0x92, 0x0a, 0xf4, 0x28, 0x0e, 0xbd, 0xa4, 0x4b, 0xe3, 0x47, 0x6b, 0xf1, 0xa5, 0x53,
	0x7b, 0xd1, 0xd9, 0x4e, 0x13, 0x37, 0xa6, 0xed, 0x34, 0x61, 0x4f, 0xe2, 0x14, 0xba, 0x84, 0xbd,
	0xe5, 0xf2, 0x41, 0xa7, 0x6b, 0xe3, 0x1b, 0xdb, 0x20, 0xe5, 0xf2, 0x86, 0xac, 0x26, 0xba, 0x82,
	0x87, 0xd1, 0x82, 0x40, 0xd6, 0x4f, 0xc8, 0x67, 0x8b, 0xc8, 0x16, 0x95, 0xb0, 0x53, 0x70, 0xea,
	0x87, 0x34, 0xea, 0xc0, 0x7e, 0x7c, 0x34, 0x90, 0xfd, 0xd0, 0xfa, 0x84, 0x96, 0x9f, 0x6c, 0x06,
	0x2c, 0x8d, 0x9e, 0xcb, 0xef, 0x8c, 0x8e, 0x08, 0xb9, 0x6d, 0x74, 0x19, 0x4e, 0x34, 0x1a, 0xcb,
	0x2a, 0xa2, 0xb7, 0x2f, 0xff, 0xac, 0x0e, 0x99, 0x90, 0x1f, 0x36, 0x83, 0x60, 0x52, 0x9d, 0x33,
	0xdf, 0x9b, 0xb0, 0xf1, 0x98, 0xfa, 0xc3, 0xea, 0x84, 0xf1, 0x51, 0xd5, 0xfa, 0x42, 0xf9, 0x59,
	0xfd, 0xed, 0x67, 0xd4, 0xbf, 0x57, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x85, 0x1c, 0x29,
	0x1d, 0x09, 0x00, 0x00,
}
